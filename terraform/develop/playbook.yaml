- name: Basic Setup
  hosts: all
  gather_facts: false
  # Problems with sudo password while running the playbook: ansible-playbook -i inventory.yaml playbook.yaml
  # Run instead: ansible-playbook -i inventory.yaml playbook.yaml --ask-become-pass https://stackoverflow.com/questions/21870083/specify-sudo-password-for-ansible
  become: true # for creating files e.g. config.toml
  # ansible_python_interpreter error: https://stackoverflow.com/questions/64099259/ansible-ansible-python-interpreter-error
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - debug: var=ansible_host
    # - set_fact:
    #     ansible_python_interpreter: "/usr/bin/python3"

    - name: Wait 200 seconds for port 22 to become open and contain "OpenSSH"
      ansible.builtin.wait_for:
        port: 22
        host: "{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}"
        search_regex: OpenSSH
        delay: 10
        timeout: 200
      vars:
        ansible_connection: local

# each machine gets their hostname set
    - name: Set a hostname
      ansible.builtin.hostname:
        name: "{{ node_hostname }}"

# each machine copies and gets updates /etc/hosts so they know each other
    - name: Add IP to /etc/hosts in all nodes
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item]['ansible_host'] }} {{ hostvars[item]['inventory_hostname'] }}"
        state: present
        backup: yes
      loop: "{{ groups['all'] }}"
    
    # - name: Copy /etc/hosts template
    #   ansible.builtin.copy:
    #     backup: true
    #     src: ./files/hosts
    #     dest: /tmp/hosts

    # - name: Insert/Update configuration using a local file and validate it
    #   ansible.builtin.blockinfile:
    #     block: "{{ lookup('file', './files/hosts') }}"
    #     path: /etc/hosts
    #     backup: yes

# Why disable swap? - https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin
    - name: Disable swap on all nodes
      ansible.builtin.shell: swapoff -a


# Prerequisites to install container runtime- https://kubernetes.io/docs/setup/production-environment/container-runtimes/#install-and-configure-prerequisites

    - name: kernel module prerequisites
      ansible.builtin.shell:
        cmd: |
          cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
          overlay
          br_netfilter
          EOF

    - name: Add overlay module
      community.general.modprobe:
        name: overlay
        state: present

    - name: Add br_netfilter module
      community.general.modprobe:
        name: br_netfilter
        state: present

    - name: Set sysctl params required by setup
      ansible.builtin.shell:
        cmd: |
          cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          EOF

    - name: Apply sysctl params without reboot
      ansible.builtin.shell: sysctl --system

    - name: Create containerd config file
      ansible.builtin.shell: mkdir -p /etc/containerd && touch /etc/containerd/config.toml

    - name: Install containerd prerequisites
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release

# Install Docker
    - name: Create keyrings directory
      file: 
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    # - name: add docker GPG key
    #   apt_key:
    #     url: https://download.docker.com/linux/ubuntu/gpg
    #     state: present

    # - name: Add Docker Repository
    #   apt_repository:
    #     repo: deb https://download.docker.com/linux/ubuntu jammy stable
    #     state: present

    - name: Add docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg

    - name: Add Docker Repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true

# Install container runtime (containerd)

    - name: Install containerd.io
      ansible.builtin.apt:
        pkg:
          - containerd.io

    - name: Enable containerd
      ansible.builtin.systemd:
        name: containerd
        daemon_reload: yes
        state: started
        enabled: yes

# Configuring the systemd cgroup driver - https://kubernetes.io/docs/setup/production-environment/container-runtimes/#systemd-cgroup-driver
    - name: Setup containerd to use systemd as cgroup
      ansible.builtin.copy:
        backup: true
        src: ./files/containerd-config.toml
        dest: /etc/containerd/config.toml

    - name: Restart service cron, in all cases, also issue daemon-reload to pick up config changes
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: containerd

# Install kubeadm - https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-kubeadm-kubelet-and-kubectl
    - name: Download Kubernetes public key
      ansible.builtin.shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes Repository
      ansible.builtin.shell: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

    - name: Install kubadm, kubectl, kubelet
      ansible.builtin.shell: |
        sudo apt-get update
        sudo apt-get install -y kubelet kubeadm kubectl

    # prevents those packages being affected by apt-upgrade apt-update
    - name: Hold kubectl,kubeadm,kubelet packages
      ansible.builtin.shell: apt-mark hold kubelet kubectl kubeadm

    # - name: Add kubernetes repo
    #   ansible.builtin.apt_repository:
    #     repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    #     state: present
    #     filename: kubernetes
    #     update_cache: true

    # - name: update apt package index
    #   apt:
    #     update_cache: true

    # - name: Install kubelet
    #   ansible.builtin.apt:
    #     name: kubelet=1.31
    #     # update_cache: true

    # - name: Install kubeadm
    #   ansible.builtin.apt:
    #     name: kubeadm=1.31

    # - name: Install kubectl
    #   ansible.builtin.apt:
    #     name: kubectl=1.31

    # - name: Install kubadm, kubectl, kubelet
    #   ansible.builtin.apt:
    #     pkg:
    #       - kubelet
    #       - kubeadm
    #       - kubectl

# Setup Control Plane - https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node
- name: Setup Control Plane Node
  hosts: master
  become: true
  tasks:
    - name: Initialize kubeadm
      # ansible_host variable used which is public ip and not private ip of machine
      ansible.builtin.shell: sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint "{{ansible_host}}:6443"

    - name: Create .kube directory for ubuntu user
      ansible.builtin.file:
        path: /home/ubuntu/.kube
        state: directory
        mode: "0755"
        owner: ubuntu
        group: ubuntu

    # when kubeadm is initialized admin config gets copied into kube config
    - name: Copy kubeconfig to ubuntu user's home
      # shell: sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: "0600"

    # - name: set the correct permission on kubeconfig file
    #   shell: sudo chown $(id -u):$(id -g) $HOME/.kube/config

    - name: Install flannel
      become: false
      ansible.builtin.shell: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/v0.20.2/Documentation/kube-flannel.yml
      environment:
        KUBECONFIG: /home/ubuntu/.kube/config

    - name: Copy kubeconfig file locally
      ansible.builtin.fetch:
        src: /home/ubuntu/.kube/config
        dest: /tmp/kubeconfig/
        flat: yes

# Cluster is created but worker nodes havent joined yet
    - name: Generate join token for worker nodes
      ansible.builtin.shell: sudo kubeadm token create --print-join-command
      register: join_node_token

    - name: Save join command as variable
      ansible.builtin.set_fact:
        join_node: "{{ join_node_token.stdout_lines[0] }}"

- name: Setup Worker Nodes
  hosts: workers
  become: true
  tasks:
  # execute join node variable as command as configured in the control plane step
    - name: add worker nodes to cluster
      shell: "sudo {{ hostvars['control_plane'].join_node }}"
